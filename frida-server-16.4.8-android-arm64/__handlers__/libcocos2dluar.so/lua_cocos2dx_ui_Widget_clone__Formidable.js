/*
 * Auto-generated by Frida. Please modify to match the signature of lua_cocos2dx_ui_Widget_clone__Formidable.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */
{
  /**
   * Called synchronously when about to call lua_cocos2dx_ui_Widget_clone__Formidable.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    log('lua_cocos2dx_ui_Widget_clone__Formidable()');
	this.x = args[0];
	this.y = args[1];
	this.z = args[2];
	this.w = args[3];
  },

  /**
   * Called synchronously when about to return from lua_cocos2dx_ui_Widget_clone__Formidable.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
	  try {
		log('retval: "' + retval + '"');
		log('x: "' + this.x + '"');
		log('y: "' + this.y + '"');
		log('z: "' + this.z + '"');
		// log('t: "' + this.t + '"');
		log('w: "' + this.w + '"');
		if (retval != 0x0) {
			log(hexdump(retval, {
				  offset: 0,
				  length: 32,
				  header: true,
				  ansi: true
			  }));
		}
	} catch (err) {
		log('err: ' + err);
	}
	log('leavelua_cocos2dx_ui_Widget_clone__Formidable()');
  }
}
