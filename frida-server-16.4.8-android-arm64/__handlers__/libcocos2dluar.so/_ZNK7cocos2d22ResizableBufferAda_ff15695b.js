/*
 * Auto-generated by Frida. Please modify to match the signature of _ZNK7cocos2d22ResizableBufferAdapterINSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE6bufferEv.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call _ZNK7cocos2d22ResizableBufferAdapterINSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE6bufferEv.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    log('ResizableBufferAdapterbuffer.buffer()');
	this.x = args[0];
	this.y = args[1];
	this.z = args[2];
	this.w = args[3];
  },

  /**
   * Called synchronously when about to return from _ZNK7cocos2d22ResizableBufferAdapterINSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE6bufferEv.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
	  try {
		log('	x: "' + this.x/* .readCString() */ + '"');
		log('	y: "' + this.y + ' | ' + this.y/* .readCString() */ + '"');
		log('	z: "' + this.z + ' | ' + this.z/* .readCString() */ + '"');
		// log('	t: "' + this.t + '"');
		log('	w: "' + this.w/* .readCString() */ + '"');
		log('	ret: "' + retval.readCString(6) + '"');
		// log(hexdump(retval, {
			  // offset: 0,
			  // length: 100,
			  // header: true,
			  // ansi: true
		  // }));
	} catch (err) {
		console.log('err: ' + err);
	}
	log('leave ResizableBufferAdapterbuffer.buffer()');
  }
}
